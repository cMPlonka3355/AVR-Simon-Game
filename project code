; projectCode.asm
; Devlopers: Denise Pierre, Connor Plonka, Dominique Lucien
;
; Version of Simon game, where the player has to repeat a pattern
; of blinking colored lights, with the pattern increasing in length
; as the player goes through the rounds.
; ------------------------------------------------------------

.equ DELAY_INTERRUPT = 65536 - (500000 / 16)    ; sleep for 1/2 second via interrupt

.equ patternAddress = 0x0100			; starting address for pattern
.equ patternLength = 50				; default pattern length
.equ DELAY_S = 30                       	; sleep 1 second

.def scoreKeep = r21				; keeps track of player's score
.def patternLengthForRound = r22		; holds length of pattern to be output each round
.def buttonInputValue = r25			; holds input from player
.def allowInput = r26				; checks for whether player can input value
.def ledCount = r27				; holds time for LEDs to be on

; Vector Table
; ------------------------------------------------------------
.org 0x0000
	  jmp	    main
          
.org PCI2addr                           ; pin-change interrupt for Port D
	  jmp	    four_button_press

.org OVF1addr                  		; timer overflow
	  jmp	    tm1_isr

.org INT_VECTORS_SIZE                   ; end Vector Table
; ------------------------------------------------------------


main:
; main application method
;	  one-time setup & configuration
; ------------------------------------------------------------
; set ups for output and input
	  ; setup 4 pins for output to light
	  sbi	    DDRB, DDB0	 	; LED 1
	  sbi	    DDRB, DDB1       	; LED 2
	  sbi	    DDRB, DDB2       	; LED 3
	  sbi	    DDRB, DDB3       	; LED 4

	  ; set 4 light pins to low voltage
	  cbi	    PORTB, PB0	
	  cbi	    PORTB, PB1
	  cbi	    PORTB, PB2
	  cbi	    PORTB, PB3
	
	  ; setup different 4 pins for input to the machine, to match light
	  cbi	    DDRD, DDD2		; Button 1
	  cbi	    DDRD, DDD3		; Button 2
	  cbi	    DDRD, DDD4		; Button 3
	  cbi	    DDRD, DDD5		; Button 4

	  ; set initial state of buttons to high impedance
	  cbi	    PORTD, PD2          
	  cbi	    PORTD, PD3          
	  cbi	    PORTD, PD4          
	  cbi	    PORTD, PD5

	  ; enable pin-change interrupts for Port D
	  ldi	    r20, (1<<PCIE2)     
	  sts	    PCICR, r20
	  ldi	    r20, 0b00111100		; enable pin change for D2-5
	  sts	    PCMSK2, r20
        
	  call	    tm1_init			; initialize timer1

	  sei
	
	  ; setup connection with 4 digit display, to keep track of score
	  ldi	    r16, patternLength		; set variable with length value
	  mov	    r3, r16
	
	  ldi	    scoreKeep, 0		; set up variable for keeping track of score

	  ldi	    patternLengthForRound, 5	; sets length of pattern to be displayed for first round
	
	  ldi	    allowInput, 0		; disable player input
          
	  call	    generate_pattern		; generate initial pattern
; ------------------------------------------------------------
	
main_gameplay_loop:					; initialize loop counter
	  ; display value of score
	  ldi	    r23, 0				; setup register for looping display_pattern 
	
	  ; copy address to z pointer, in order to increment in loop
	  ldi	    zh, HIGH(patternAddress)	
	  ldi	    zl, LOW(patternAddress)

display_pattern: 
	  ; loading z into r16
	  ld	    r16, z+				; do: fetch value from memory using first memory + (pattern length - 1) 
	  						; also increments to next place in pattern

wait_for_display:					; check if any lights are on
	  ; led count starts at 0 on first itteration
	  tst	    ledCount                    	; while (any light on)
	  brne	    wait_for_display            	; continue looping to check
;	   rjmp	    delay_to_avoid_double       	; delay to avoid displaying repeated light without space
show_light:                                     	; display value by turning on corresponding light
	  ; check if the value we loaded from memory into r16 == address corresponding to LED 1,2,3 or 4  
	  cpi	    r16, 0b0001		
	  breq	    turn_PB0_on
	  
	  cpi	r16, 0b0010		
	  breq	    turn_PB1_on
	  
	  cpi	    r16, 0b0100		
	  breq	    turn_PB2_on
	  
	  cpi	    r16, 0b1000		
	  breq	    turn_PB3_on

turn_PB0_on:
	  sbi	    PORTB, PB0			; turn on LED 1
	  ldi	    ledCount, 1			; set LED count for duration of LED being on
	  rjmp	    continue_display_pattern	; continue displaying pattern

turn_PB1_on:
	  sbi	    PORTB, PB1
	  ldi	    ledCount, 1
	  rjmp	    continue_display_pattern	  
  
turn_PB2_on:
	  sbi	    PORTB, PB2
	  ldi	    ledCount, 1
	  rjmp	    continue_display_pattern	  
	  
turn_PB3_on:
	  sbi	    PORTB, PB3
	  ldi	    ledCount, 1
					
continue_display_pattern:	  	  
	  in	    r16,PORTB			; get value of PORTB, checking if any lights on

	  ; check if any LED is still on
	  tst	    r16				; while (any light on)
	  brne	    continue_display_pattern	; continue looping to check
	  					; else
	  inc	    r23				; increment variable to track loop
	  cpse	    r23, patternLengthForRound	; while ( loop tracker <  pattern length)

	  ; continue displaying pattern
	  rjmp	    display_pattern		;   jump to display_pattern
	
	  ldi	    r23, 0		       	; set loop variable back to zero

player_repeat_pattern:
	  ld	    r16, z+		       	; do: fetch value of pattern to match from memory
	  					; also increments to next place in pattern
	  				
	  ldi	    allowInput, 1		; set so player is allowed to input values

wait_for_input:
	  ; check if player input is allowed
	  cpi	    allowInput, 0		; while (allowInput)
	  brne	    wait_for_input		;    wait for player input if not allowed
	  				
compare_values:
	  cp	    buttonInputValue, r16	; compare player input to value from memory
	  brne	    lose_game			; if not same value, jump to lose state
						; else continue loop
	  		
	  inc	    r23				; increment variable tracker
	  cpse	    r23, patternLengthForRound	; while (loop tracker < pattern length), jump to player_repeat_pattern
	  rjmp	    player_repeat_pattern	; continue player repetition
	  
	  inc	    scoreKeep 			; increment score
	  

end_main:
	  inc	    patternLengthForRound			; increment pattern length to be displayed next round
	  cpi	    patternLengthForRound, patternLength + 1	; if (pattern length for round greater than total pattern)
	  breq	    win_game					;     player wins game
	  rjmp	    main_gameplay_loop				; else repeat gameplay loop

win_game:
	  rjmp	    win_game					; infinite loop for winning the game

lose_game:
	  rjmp	    lose_game					; infinite loop for losing the game

; ------------------------------------------------------------
tm1_init:
; intitialize timer1 with interrupts
; ------------------------------------------------------------
	  ; set timer counter
	  ldi	    r20, HIGH(DELAY_INTERRUPT)	; load high byte of delay value
	  sts	    TCNT1H, r20			; set timer counter high byte
	  ldi	    r20, LOW(DELAY_INTERRUPT)	; load low byte of delay value
	  sts	    TCNT1L, r20			; set timer counter low byte
         
	  clr	    r20                 	; normal mode
	  sts	    TCCR1A, r20			; set timer1 control register A

	  ldi	    r20, (1<<CS12)     		; normal mode, clk/256
	  sts	    TCCR1B, r20        		; clock is started

	  ldi	    r20, (1<<TOIE1)    		; enable timer overflow interrupt
	  sts	    TIMSK1, r20			; set timer1 interrupt mask register

	  ret                          		; delay_tm1

; ------------------------------------------------------------
tm1_isr:
; handle timer1 interrupts (overflow)
; ------------------------------------------------------------
	  tst	    ledCount			; check if LED is off
	  brne	    tm1_isr_decrement_led	; decrement LED count if off

	  ; turn off all LEDs if LED count is zero
	  cbi	    PORTB, PB0			; turn lights off
	  cbi	    PORTB, PB1
	  cbi	    PORTB, PB2
	  cbi	    PORTB, PB3	
	  
	  rjmp	    tm1_isr_ret			; return from ISR
	  
tm1_isr_decrement_led:
	  dec	    ledCount 

tm1_isr_ret:
	  ldi	    r20, HIGH(DELAY_INTERRUPT)	; reset timer counter
	  sts	    TCNT1H, r20			; set timer counter high byte
	  ldi	    r20, LOW(DELAY_INTERRUPT)	; load low byte of delay value
	  sts	    TCNT1L, r20			; set timer counter low byte

	  reti					

; ------------------------------------------------------------
four_button_press:                      
;the purpose of four_button_press is to take button input, turn led on, turn led off 
	  tst	    ledCount			; check to see if light is currently on
	  brne	    end_fbpress			; exit if LED is off
	  
	  tst	    allowInput			; check to see if player is allowed to input anything
	  breq	    end_fbpress			; exit if player input is disabled
	  
	  ldi	    ledCount, 1			; set LED count for button press
	  ldi	    allowInput, 0		; after returning, makes sure player is not allowed to input until next input is required
                                  
	  in	    r16,PIND			; copy the entire D port into r16     
	  cpi	    r16,0b000100		; use CPI to check if Port D Pin 0 (button1) is set (pressed)
	  breq	    button_one_pressed		; branch if button 1 is pressed
	  cpi	    r16,0b001000		; use CPI to check if Port D Pin 1 (button2) is set (pressed) 
	  breq	    button_two_pressed 
	  cpi	    r16,0b010000		; use CPI to check if Port D Pin 2 (button3) is set (pressed)
	  breq	    button_three_pressed
	  cpi	    r16,0b100000		; use CPI to check if Port D Pin 3 (button4) is set (pressed)
	  breq	    button_four_pressed
	  rjmp	    end_fbpress			; exit interrupt is no button is pressed

button_one_pressed:
          sbi       PORTB,PB0			; turn LED 1 on
          ldi       buttonInputValue, 0b0001	; set player input value to match LED 1
          rjmp      end_fbpress

button_two_pressed:
          sbi       PORTB,PB1			; turn LED 2 on
          ldi       buttonInputValue, 0b0010	; set player input value to match LED 2
          rjmp      end_fbpress

button_three_pressed:
          sbi       PORTB,PB2			; turn LED 3 on
          ldi       buttonInputValue, 0b0100	; set player input value to match LED 3
          rjmp      end_fbpress

button_four_pressed:
          sbi       PORTB,PB3			; turn LED 4 on
          ldi       buttonInputValue, 0b1000	; set player input value to match LED 4

end_fbpress:
	  ldi	    r16, 0			

	  ; clear PORTD to allow only one button to be pressed
	  out	    PORTD, r16			; clears PORTD so only allows one bit to be on when player inputs and checks for comparisons
	  reti

; ------------------------------------------------------------
generate_pattern:
; generates pattern to be utilized in gameplay loop
; ------------------------------------------------------------
	; first few commented for debugging
	ldi	r16, 0b0010         ; set patter value for LED 2
	sts	0x0100, r16         ; store pattern value in memory
	ldi	r16, 0b0001         ; LED 1
	sts	0x0101, r16
	ldi	r16, 0b1000         ; LED 4
	sts	0x0102, r16
	ldi	r16, 0b0100         ; LED 4
	sts	0x0103, r16
	ldi	r16, 0b0100         ; LED 3
	sts	0x0104, r16
	ldi	r16, 0b0001
	sts	0x0105, r16
	ldi	r16, 0b0001
	sts	0x0106, r16
	ldi	r16, 0b1000
	sts	0x0107, r16
	ldi	r16, 0b1000
	sts	0x0108, r16
	ldi	r16, 0b0010
	sts	0x0109, r16
	ldi	r16, 0b0001
	sts	0x010A, r16
	ldi	r16, 0b0001
	sts	0x010B, r16
	ldi	r16, 0b0100
	sts	0x010C, r16
	ldi	r16, 0b0001
	sts	0x010D, r16
	ldi	r16, 0b1000
	sts	0x010E, r16
	ldi	r16, 0b1000
	sts	0x010F, r16
	ldi	r16, 0b0001
	sts	0x0110, r16
	ldi	r16, 0b0100
	sts	0x0111, r16
	ldi	r16, 0b0001
	sts	0x0112, r16
	ldi	r16, 0b0010
	sts	0x0113, r16
	ldi	r16, 0b0100
	sts	0x0114, r16
	ldi	r16, 0b0100
	sts	0x0115, r16
	ldi	r16, 0b0010
	sts	0x0116, r16
	ldi	r16, 0b0010
	sts	0x0117, r16
	ldi	r16, 0b0001
	sts	0x0118, r16
	ldi	r16, 0b1000
	sts	0x0119, r16
	ldi	r16, 0b0010
	sts	0x011A, r16
	ldi	r16, 0b1000
	sts	0x011B, r16
	ldi	r16, 0b1000
	sts	0x011C, r16
	ldi	r16, 0b0010
	sts	0x011D, r16
	ldi	r16, 0b0100
	sts	0x011E, r16
	ldi	r16, 0b0001
	sts	0x011F, r16
	ldi	r16, 0b0001
	sts	0x0120, r16
	ldi	r16, 0b0010
	sts	0x0121, r16
	ldi	r16, 0b1000
	sts	0x0122, r16
	ldi	r16, 0b0010
	sts	0x0123, r16
	ldi	r16, 0b0100
	sts	0x0124, r16
	ldi	r16, 0b0001
	sts	0x0125, r16
	ldi	r16, 0b0001
	sts	0x0126, r16
	ldi	r16, 0b0100
	sts	0x0127, r16
	ldi	r16, 0b0010
	sts	0x0128, r16
	ldi	r16, 0b1000
	sts	0x0129, r16
	ldi	r16, 0b0001
	sts	0x012A, r16
	ldi	r16, 0b0100
	sts	0x012B, r16
	ldi	r16, 0b0100
	sts	0x012C, r16
	ldi	r16, 0b0010
	sts	0x012D, r16
	ldi	r16, 0b1000
	sts	0x012E, r16
	ldi	r16, 0b0100
	sts	0x012F, r16
	ldi	r16, 0b0001
	sts	0x0130, r16
	ldi	r16, 0b0010
	sts	0x0131, r16

; ------------------------------------------------------------
delay_to_avoid_double:
; creates a timed delay using multiple nested loops
; ------------------------------------------------------------
; add cli and sei so can't interrupt
	  ldi       r18,DELAY_S		; load delay value

delay_ms_1:
	  ldi       r17,200

delay_ms_2:
	  ldi       r19,250

delay_ms_3:
	  nop				; no operation
	  nop
	  dec       r19			; decrement delay counter
	  brne      delay_ms_3          ; 250 * 5 = 1250

	  dec       r17
	  brne      delay_ms_2          ; 200 * 1250 = 250K

	  dec       r18
	  brne      delay_ms_1          ; 16 * 250K = 4M (1/4s ex)
dealy_ms_end:
	  rjmp show_light		; jump to display light
