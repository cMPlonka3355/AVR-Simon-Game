; projectCode.asm
; Devlopers: Denise Pierre, Connor Plonka, Dominique Lucien
;
; Version of Simon game, where the player has to repeat a pattern
; of blinking colored lights, with the pattern increasing in length
; as the player goes through the rounds.
; ------------------------------------------------------------

.equ DELAY_INTERRUPT = 65536 - (500000 / 16)     ; sleep for 1/2 second via interrupt

.equ patternAddress = 0x0100		; starting address for pattern
.equ patternLength = 50			; default pattern length
 

.def scoreKeep = r21			; keeps track of player's score
.def patternLengthForRound = r22	; holds length of pattern to be output each round
.def buttonInputValue = r25		; holds input from player
.def allowInput = r26			; checks for whether player can input value
.def ledCount = r27			; holds time for LEDs to be on

; Vector Table
; ------------------------------------------------------------
.org 0x0000
          jmp       main
          
.org PCI2addr                           ; pin-change interrupt for Port D
	  jmp	    four_button_press

.org OVF1addr                  		; timer overflow
          jmp       tm1_isr

.org INT_VECTORS_SIZE                   ; end Vector Table
; ------------------------------------------------------------


main:
; main application method
;         one-time setup & configuration
; ------------------------------------------------------------
; set ups for output and input
                                 ; setup 4 pins for output to light
	sbi	DDRB, DDB0	 ; LED 1
	sbi	DDRB, DDB1       ; LED 2
	sbi	DDRB, DDB2       ; LED 3
	sbi	DDRB, DDB3       ; LED 4

				; set 4 light pins to low voltage
	cbi     PORTB, PB0	
	cbi     PORTB, PB1
	cbi     PORTB, PB2
	cbi     PORTB, PB3
	
				; setup different 4 pins for input to the machine, to match light
	cbi	DDRD, DDD0	; Button 1
	cbi	DDRD, DDD1	; Button 2
	cbi	DDRD, DDD2	; Button 3
	cbi	DDRD, DDD3	; Button 4
	
	cbi       PORTD, PD0          ; set high impedance
	cbi       PORTD, PD1          ; set high impedance
	cbi       PORTD, PD2          ; set high impedance
	cbi       PORTD, PD3          ; set high impedance
        ldi       r20, (1<<PCIE2)     ; enable pin-change interrupts for Port D
        sts       PCICR, r20
        ldi       r20, 0b00001111     ; enable pin-change for D0-3
        sts       PCMSK2, r20
        
        call	  tm1_init
	
	sei
	
;setup connection with 4 digit display, to keep track of score
	
	ldi	r16, patternLength	;set variable with length value
	mov	r3, r16
	
	ldi	scoreKeep, 0		;set up variable for keeping track of score

	ldi	patternLengthForRound, 1	; sets length of pattern to be displayed for first round
	
	ldi	allowInput, 0		; makes the player unable to input values

generate_pattern:
;generates pattern to be utilized in gameplay loop
	ldi	r16, 0b0010
	sts	0x0100, r16
	ldi	r16, 0b0001
	sts	0x0101, r16
	ldi	r16, 0b1000
	sts	0x0102, r16
	ldi	r16, 0b0100
	sts	0x0103, r16
	ldi	r16, 0b0100
	sts	0x0104, r16
	ldi	r16, 0b0001
	sts	0x0105, r16
	ldi	r16, 0b0001
	sts	0x0106, r16
	ldi	r16, 0b1000
	sts	0x0107, r16
	ldi	r16, 0b1000
	sts	0x0108, r16
	ldi	r16, 0b0010
	sts	0x0109, r16
	ldi	r16, 0b0001
	sts	0x010A, r16
	ldi	r16, 0b0001
	sts	0x010B, r16
	ldi	r16, 0b0100
	sts	0x010C, r16
	ldi	r16, 0b0001
	sts	0x010D, r16
	ldi	r16, 0b1000
	sts	0x010E, r16
	ldi	r16, 0b1000
	sts	0x010F, r16
	ldi	r16, 0b0001
	sts	0x0110, r16
	ldi	r16, 0b0100
	sts	0x0111, r16
	ldi	r16, 0b0001
	sts	0x0112, r16
	ldi	r16, 0b0010
	sts	0x0113, r16
	ldi	r16, 0b0100
	sts	0x0114, r16
	ldi	r16, 0b0100
	sts	0x0115, r16
	ldi	r16, 0b0010
	sts	0x0116, r16
	ldi	r16, 0b0010
	sts	0x0117, r16
	ldi	r16, 0b0001
	sts	0x0118, r16
	ldi	r16, 0b1000
	sts	0x0119, r16
	ldi	r16, 0b0010
	sts	0x011A, r16
	ldi	r16, 0b1000
	sts	0x011B, r16
	ldi	r16, 0b1000
	sts	0x011C, r16
	ldi	r16, 0b0010
	sts	0x011D, r16
	ldi	r16, 0b0100
	sts	0x011E, r16
	ldi	r16, 0b0001
	sts	0x011F, r16
	ldi	r16, 0b0001
	sts	0x0120, r16
	ldi	r16, 0b0010
	sts	0x0121, r16
	ldi	r16, 0b1000
	sts	0x0122, r16
	ldi	r16, 0b0010
	sts	0x0123, r16
	ldi	r16, 0b0100
	sts	0x0124, r16
	ldi	r16, 0b0001
	sts	0x0125, r16
	ldi	r16, 0b0001
	sts	0x0126, r16
	ldi	r16, 0b0100
	sts	0x0127, r16
	ldi	r16, 0b0010
	sts	0x0128, r16
	ldi	r16, 0b1000
	sts	0x0129, r16
	ldi	r16, 0b0001
	sts	0x012A, r16
	ldi	r16, 0b0100
	sts	0x012B, r16
	ldi	r16, 0b0100
	sts	0x012C, r16
	ldi	r16, 0b0010
	sts	0x012D, r16
	ldi	r16, 0b1000
	sts	0x012E, r16
	ldi	r16, 0b0100
	sts	0x012F, r16
	ldi	r16, 0b0001
	sts	0x0130, r16
	ldi	r16, 0b0010
	sts	0x0131, r16

; ------------------------------------------------------------
	
main_gameplay_loop:
                                          
	;display value of score
	
	ldi	 r23, 0				;setup register for looping display_pattern 
	ldi	zh, HIGH(patternAddress)	;copy address to z pointer, in order to increment in loop
	ldi	zl, LOW(patternAddress)

display_pattern: 
	  ld	    r16, z+		;do: fetch value from memory using first memory + (pattern length - 1)
	  				;also increments to next place in pattern
	  cpi	    r16, 0b0001		;display value by turning on corresponding light
	  breq      turn_PB0_on
	  
	  cpi	    r16, 0b0010		
	  breq      turn_PB1_on
	  
	  cpi	    r16, 0b0100		
	  breq      turn_PB2_on
	  
	  cpi	    r16, 0b1000		
	  breq      turn_PB3_on

turn_PB0_on:
	  sbi	    PORTB, PB0
	  ldi	    ledCount, 1
	  rjmp      continue_display_pattern

turn_PB1_on:
	  sbi	    PORTB, PB1
	  ldi	    ledCount, 1
	  rjmp      continue_display_pattern	  
  
turn_PB2_on:
	  sbi	    PORTB, PB2
	  ldi	    ledCount, 1
	  rjmp      continue_display_pattern	  
	  
turn_PB3_on:
	  sbi	    PORTB, PB3
	  ldi	    ledCount, 1
					
continue_display_pattern:	  	  
	  	
	  in      r16,PORTB		; get value of PORTB, checking if any lights on
	  tst	  r16			; while (any light on)
	  brne	  continue_display_pattern	; continue looping to check
	  				; else
	  inc	  r23			; increment variable to track loop
	  cpse	  r23, patternLengthForRound		;while ( loop tracker <  pattern length)
	  rjmp	  display_pattern			;   jump to display_pattern
	
	  ldi	  r23, 0		;set loop variable back to zero

player_repeat_pattern:
	  
	  ld	  r16, z+		;do: fetch value of pattern to match from memory
	  				;also increments to next place in pattern
	  				
	  ldi	  allowInput, 1		;set so player is allowed to input values
wait_for_input:
	  				
	  cpi	  allowInput, 0		;while (allowInput)
	  brne    wait_for_input	;    wait for player input
	  				
compare_values:
	  cp	  buttonInputValue, r16	;compare player input to value from memory
	  brne    lose_game		;if not same value, jump to lose state
					;else continue loop
	  		
	  inc	  r23			;increment variable tracker
	  cpse	  r23, patternLengthForRound		;while (loop tracker < pattern length), jump to player_repeat_pattern
	  rjmp	  player_repeat_pattern
	  
	  inc	  scoreKeep 		;increment score
	  

end_main:
	inc	patternLengthForRound	; increment pattern length to be displayed next round
	cpi	patternLengthForRound, patternLength + 1	; if (pattern length for round greater than total pattern)
	breq	win_game					;     player wins game
	rjmp	main_gameplay_loop				; else repeat gameplay loop

win_game:
	rjmp	win_game

lose_game:
	rjmp	lose_game

          
; ------------------------------------------------------------
tm1_init:
; intitialize timer1 with interrupts
; ------------------------------------------------------------
          ; set timer counter
          ldi       r20, HIGH(DELAY_INTERRUPT)
          sts       TCNT1H, r20
          ldi       r20, LOW(DELAY_INTERRUPT)
          sts       TCNT1L, r20
         
          clr       r20                 ; normal mode
          sts       TCCR1A, r20

          ldi       r20, (1<<CS12)      ; normal mode, clk/256
          sts       TCCR1B, r20         ; clock is started

          ldi       r20, (1<<TOIE1)     ; enable timer overflow interrupt
          sts       TIMSK1, r20

          ret                           ; delay_tm1

; ------------------------------------------------------------
tm1_isr:
; handle timer1 interrupts (overflow)
; ------------------------------------------------------------
	  tst	    ledCount
	  brne	    tm1_isr_decrement_led
	  
	  cbi     PORTB, PB0		;turn lights off
	  cbi     PORTB, PB1
	  cbi     PORTB, PB2
	  cbi     PORTB, PB3	
	  
	  rjmp	  tm1_isr_ret
	  
tm1_isr_decrement_led:
	  dec	    ledCount

tm1_isr_ret:
          ldi       r20, HIGH(DELAY_INTERRUPT); reset timer counter
          sts       TCNT1H, r20
          ldi       r20, LOW(DELAY_INTERRUPT)
          sts       TCNT1L, r20

          reti

; ------------------------------------------------------------
four_button_press:                      
;the purpose of four_button_press is to take button input, turn led on, turn led off 

	  tst       ledCount		; check to see if light is currently on
	  brne	    end_fbpress
	  
	  tst	    allowInput		; check to see if player is allowed to input anything
	  breq	    end_fbpress
	  
	  ldi	    ledCount, 1
	  ldi	    allowInput, 0	; after returning, makes sure player is not allowed to input until next input is required
                                  
          in        r16,PORTD           ; copy the entire D port into r16     
          cpi       r16,0b0001          ; use CPI to check if Port D Pin 0 (button1) is set (pressed)
          breq      button_one_pressed  ; if pressed branch
          cpi       r16,0b0010          ; use CPI to check if Port D Pin 1 (button2) is set (pressed) 
          breq      button_two_pressed
          cpi       r16,0b0100          ; use CPI to check if Port D Pin 2 (button3) is set (pressed)
          breq      button_three_pressed
          cpi       r16,0b1000          ; use CPI to check if Port D Pin 3 (button4) is set (pressed)
          breq      button_four_pressed
          rjmp      four_button_press
button_one_pressed:
          sbi       PORTB,PB0           ; turn LED 1 on
          ldi       buttonInputValue, 0b0001	; set player input value to match LED 1
          rjmp      end_fbpress
button_two_pressed:
          sbi       PORTB,PB1           ; turn LED 2 on
          ldi       buttonInputValue, 0b0010	; set player input value to match LED 2
          rjmp      end_fbpress
button_three_pressed:
          sbi       PORTB,PB2           ; turn LED 3 on
          ldi       buttonInputValue, 0b0100	; set player input value to match LED 3
          rjmp      end_fbpress
button_four_pressed:
          sbi       PORTB,PB3           ; turn LED 4 on
          ldi       buttonInputValue, 0b1000	; set player input value to match LED 4
end_fbpress:
	  ldi	    r16, 0
	  out	    PORTD, r16		; clears PORTD so only allows one bit to be on when player inputs and checks for comparisons
	  reti 
